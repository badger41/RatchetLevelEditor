using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using static RatchetModel;
using static TextureParser;
using System.Drawing.Imaging;
using System.IO;
using static RatchetTexture;

namespace RatchetLevelEditor
{
    public partial class TerrainViewer : Form
    {
        Matrix4 projection;
        int vertexArrayID;
        int[] texIDarr;

        int[] objTexIDArr;

        int MatrixID;

        int pgmID;
        int vsID;
        int fsID;
        int VBO;
        int indexBufferID;

        int indCnt;

        float upDir = 0;
        float sideDir = 0;
        float side2Dir = 0;

        bool wKey = false;
        bool sKey = false;
        bool dKey = false;
        bool aKey = false;

        List<uint> texList;

        bool ready = false;

        public RatchetModel_Terrain selectedModel;
        public RatchetModel_General objModel;

        Matrix4 mvp;

        Vector3 UP = new Vector3(0.0f, 0.0f, 1.0f);


        List<uint> modTexList;
        List<uint> mobList;
        int[] mobVerts;
        int[] mobInds;
        bool modReady = false;


        public TerrainViewer(Main main)
        {
            InitializeComponent();
        }

        private void TerrainViewer_Load(object sender, EventArgs e)
        {
            projection = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI / 4, glControl1.Width / (float)glControl1.Height, 0.1f, 800.0f);
            GL.ClearColor(Color.SkyBlue);

            pgmID = GL.CreateProgram();
            loadShader("shaders/vs.glsl", ShaderType.VertexShader, pgmID, out vsID);
            loadShader("shaders/fs.glsl", ShaderType.FragmentShader, pgmID, out fsID);
            GL.LinkProgram(pgmID);
            Console.WriteLine(GL.GetProgramInfoLog(pgmID));


            GL.GenVertexArrays(1, out vertexArrayID);
            GL.BindVertexArray(vertexArrayID);

            MatrixID = GL.GetUniformLocation(pgmID, "MVP");


            GL.Enable(EnableCap.DepthTest);
            GL.GenBuffers(1, out VBO);
            GL.GenBuffers(1, out indexBufferID);


            selectedModel = DataStore.terrainModel;
            if (selectedModel.vertBuff != null) //Check that there's actually vertex data to be rendered
            {

                int vertCnt = selectedModel.vertBuff.Count;
                float[] vertArr = selectedModel.vertBuff.ToArray();
                GL.BindBuffer(BufferTarget.ArrayBuffer, VBO);
                GL.BufferData(BufferTarget.ArrayBuffer, vertCnt * sizeof(float), vertArr, BufferUsageHint.StaticDraw);

                indCnt = selectedModel.indiceBuff.Count;
                uint[] indArr = selectedModel.indiceBuff.ToArray();
                GL.BindBuffer(BufferTarget.ElementArrayBuffer, indexBufferID);
                GL.BufferData(BufferTarget.ElementArrayBuffer, indCnt * sizeof(uint), indArr, BufferUsageHint.StaticDraw);
                

                //Delete old textures, so we don't fill up the GPU memory
                if (texIDarr != null)
                {
                    GL.DeleteTextures(texIDarr.Count(), texIDarr);
                }

                texList = new List<uint>();
                foreach (RatchetTexture_Model tex in selectedModel.textureConfig)
                {
                    if (!texList.Contains(tex.ID)) texList.Add(tex.ID);
                }

                int texCount = texList.Count;
                texIDarr = new int[texCount];
                GL.GenTextures(texCount, texIDarr);
                for (int i = 0; i < texCount; i++)
                {
                    Bitmap file = getTextureImage((int)texList[i]);

                    if (file != null)
                    {
                        GL.BindTexture(TextureTarget.Texture2D, texIDarr[i]);

                        BitmapData data = file.LockBits(new Rectangle(0, 0, file.Width, file.Height), ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
                        GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0, OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
                        file.UnlockBits(data);

                        //The DDS files have built in mipmaps, should probably use those instead
                        GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
                    }
                    else
                    {
                        Console.WriteLine("Error loading texture: File was null");
                    }
                }

                ready = true;
                glControl1.Invalidate();
            }
        }

<<<<<<< HEAD
=======
        private void TerrainViewer_Load(object sender, EventArgs e)
        {
            GL.ClearColor(Color.SkyBlue);

            pgmID = GL.CreateProgram();
            loadShader("shaders/vs_colored.glsl", ShaderType.VertexShader, pgmID, out vsID);
            loadShader("shaders/fs_colored.glsl", ShaderType.FragmentShader, pgmID, out fsID);
            GL.LinkProgram(pgmID);
            Console.WriteLine(GL.GetProgramInfoLog(pgmID));


            GL.GenVertexArrays(1, out vertexArrayID);
            GL.BindVertexArray(vertexArrayID);

            MatrixID = GL.GetUniformLocation(pgmID, "MVP");


            GL.Enable(EnableCap.DepthTest);
            GL.GenBuffers(1, out VBO);
            GL.GenBuffers(1, out indexBufferID);

            GL.GenBuffers(1, out pointVerts);
            GL.GenBuffers(1, out pointIndices);
        }

>>>>>>> vertex-colors
        void loadShader(String filename, ShaderType type, int program, out int address)
        {
            address = GL.CreateShader(type);
            using (StreamReader sr = new StreamReader(filename))
            {
                GL.ShaderSource(address, sr.ReadToEnd());
            }
            GL.CompileShader(address);
            GL.AttachShader(program, address);
            Console.WriteLine(GL.GetShaderInfoLog(address));
        }

        private void glControl1_Paint(object sender, PaintEventArgs e)
        {
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            glControl1.MakeCurrent();
            GL.UseProgram(pgmID);


            Matrix4 View = Matrix4.LookAt(new Vector3(300 + sideDir, 0 - side2Dir, 300 - upDir), new Vector3(200 + sideDir, 0 - side2Dir, 0 - upDir), UP);
            Matrix4 worldView = View * projection;
            if (modReady && mobyCheck.Checked == true)
            {
                foreach (RatchetMoby mob in DataStore.mobs)
                {
                    objModel = DataStore.spawnableModels.Find(x => x.modelID == mob.modelID);
                    if (objModel.vertBuff != null)
                    {
                        int insx = mobList.IndexOf((uint)objModel.modelID);

                        GL.PushMatrix();
                        Matrix4 modTrans = Matrix4.CreateTranslation(mob.x, mob.y, mob.z);
                        Matrix4 modScale = Matrix4.CreateScale(objModel.size * mob.size);
                        Matrix4 modRot = Matrix4.CreateRotationZ(mob.rot3);
                        mvp = modScale * modRot * modTrans * worldView;  //Has to be done in this order to work correctly
                        GL.UniformMatrix4(MatrixID, false, ref mvp);

                        GL.EnableVertexAttribArray(0);
                        GL.EnableVertexAttribArray(1);


                        GL.BindBuffer(BufferTarget.ArrayBuffer, mobVerts[insx]);
                        GL.BindBuffer(BufferTarget.ElementArrayBuffer, mobInds[insx]);

                        //Verts
                        GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(float) * 8, 0);
                        //UV's
                        GL.VertexAttribPointer(1, 2, VertexAttribPointerType.Float, false, sizeof(float) * 8, sizeof(float) * 6);


                        //Bind textures one by one, applying it to the relevant vertices based on the index array
                        foreach (RatchetTexture_Model tex in objModel.textureConfig)
                        {
                            int indx = modTexList.IndexOf(tex.ID);
                            GL.BindTexture(TextureTarget.Texture2D, objTexIDArr[indx]);
                            GL.DrawElements(PrimitiveType.Triangles, (int)tex.size, DrawElementsType.UnsignedShort, (int)tex.start * sizeof(ushort));
                        }

                        //GL.DrawElements(PrimitiveType.Triangles, indCnt, DrawElementsType.UnsignedShort, 0);

                        GL.DisableVertexAttribArray(1);
                        GL.DisableVertexAttribArray(0);
                        GL.PopMatrix();
                    }

                }
            }
            if (ready)
            {
                GL.PushMatrix();
                mvp = worldView;  //Has to be done in this order to work correctly

                GL.UniformMatrix4(MatrixID, false, ref mvp);

                GL.EnableVertexAttribArray(0);
                GL.EnableVertexAttribArray(1);
                GL.EnableVertexAttribArray(2);

                GL.BindBuffer(BufferTarget.ArrayBuffer, VBO);
                GL.BindBuffer(BufferTarget.ElementArrayBuffer, indexBufferID);

                //Verts
                GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, sizeof(float) * 12, 0);
                //UV's
                GL.VertexAttribPointer(1, 2, VertexAttribPointerType.Float, false, sizeof(float) * 12, sizeof(float) * 6);
                //Colors
                GL.VertexAttribPointer(2, 4, VertexAttribPointerType.Float, false, sizeof(float) * 12, sizeof(float) * 8);


                //Bind textures one by one, applying it to the relevant vertices based on the index array
                foreach (RatchetTexture_Model tex in selectedModel.textureConfig)
                {
                    int indx = texList.IndexOf(tex.ID);
                    GL.BindTexture(TextureTarget.Texture2D, texIDarr[indx]);
                    GL.DrawElements(PrimitiveType.Triangles, (int)tex.size, DrawElementsType.UnsignedInt, (int)tex.start * sizeof(uint));
                }

                //GL.DrawElements(PrimitiveType.Triangles, indCnt, DrawElementsType.UnsignedInt, 0);


                GL.DisableVertexAttribArray(2);
                GL.DisableVertexAttribArray(1);
                GL.DisableVertexAttribArray(0);

                GL.PopMatrix();
                GL.Flush();
                glControl1.SwapBuffers();

            }
        }

        private void glControl1_Resize(object sender, EventArgs e)
        {
            GL.Viewport(0, 0, glControl1.Width, glControl1.Height);
            projection = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI / 4, glControl1.Width / (float)glControl1.Height, 0.1f, 800.0f);
        }

        private void glConstrol1_ScrollWheel(object sender, MouseEventArgs e)
        {
            upDir = (e.Delta > 0) ? upDir + 1 : upDir - 1;
            glControl1.Invalidate();
        }

        private void tickTimer_Tick(object sender, EventArgs e)
        {
            if (wKey)
            {
                sideDir -= 1;
                glControl1.Invalidate();
            }
            if (sKey)
            {
                sideDir += 1;
                glControl1.Invalidate();
            }
            if (aKey)
            {
                side2Dir += 1;
                glControl1.Invalidate();
            }
            if (dKey)
            {
                side2Dir -= 1;
                glControl1.Invalidate();
            }
        }

        private void glControl1_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.W:
                    wKey = true;
                    break;
                case Keys.S:
                    sKey = true;
                    break;
                case Keys.A:
                    aKey = true;
                    break;
                case Keys.D:
                    dKey = true;
                    break;
            }
        }

        private void glControl1_KeyUp(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.W:
                    wKey = false;
                    break;
                case Keys.S:
                    sKey = false;
                    break;
                case Keys.A:
                    aKey = false;
                    break;
                case Keys.D:
                    dKey = false;
                    break;
            }
        }


        private void button2_Click(object sender, EventArgs e)
        {
            mobList = new List<uint>();
            modTexList = new List<uint>();

            foreach (RatchetMoby mob in DataStore.mobs)
            {

                if (!mobList.Contains(mob.modelID))
                {
                    objModel = DataStore.spawnableModels.Find(x => x.modelID == mob.modelID);
                    if (objModel.vertBuff != null)
                    {
                        mobList.Add(mob.modelID);
                    }
                }
            }
            int mobCount = mobList.Count();
            mobVerts = new int[mobCount];
            mobInds = new int[mobCount];

            GL.GenBuffers(mobCount, mobVerts);
            GL.GenBuffers(mobCount, mobInds);

            for (int i = 0; i < mobList.Count(); i++)
            {
                objModel = DataStore.spawnableModels.Find(x => x.modelID == mobList[i]);
                if (objModel.vertBuff != null)
                {
                    int vertCnt = objModel.vertBuff.Count;
                    float[] vertArr = objModel.vertBuff.ToArray();
                    GL.BindBuffer(BufferTarget.ArrayBuffer, mobVerts[i]);
                    GL.BufferData(BufferTarget.ArrayBuffer, vertCnt * sizeof(float), vertArr, BufferUsageHint.StaticDraw);

                    int indCnt = objModel.indiceBuff.Count;
                    UInt16[] indArr = objModel.indiceBuff.ToArray();
                    GL.BindBuffer(BufferTarget.ElementArrayBuffer, mobInds[i]);
                    GL.BufferData(BufferTarget.ElementArrayBuffer, indCnt * sizeof(UInt16), indArr, BufferUsageHint.StaticDraw);

                    foreach (RatchetTexture_Model tex in objModel.textureConfig)
                    {
                        if (!modTexList.Contains(tex.ID)) modTexList.Add(tex.ID);
                    }
                }
            }

            int texCount = modTexList.Count;
            objTexIDArr = new int[texCount];
            GL.GenTextures(texCount, objTexIDArr);
            for (int ii = 0; ii < texCount; ii++)
            {
                Bitmap file = getTextureImage((int)modTexList[ii]);

                if (file != null)
                {
                    GL.BindTexture(TextureTarget.Texture2D, objTexIDArr[ii]);

                    BitmapData data = file.LockBits(new System.Drawing.Rectangle(0, 0, file.Width, file.Height), ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
                    GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0, OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
                    file.UnlockBits(data);

                    //The DDS files have built in mipmaps, should probably use those instead
                    GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
                }
                else
                {
                    Console.WriteLine("Error loading texture: File was null");
                }
            }
            mobyCheck.Checked = true;
            modReady = true;
            glControl1.Invalidate();
        }

        private void mobyCheck_CheckedChanged(object sender, EventArgs e)
        {
            glControl1.Invalidate();
        }
    }
}
